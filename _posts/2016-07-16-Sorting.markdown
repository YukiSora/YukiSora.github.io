---
layout: article
title: "Sorting"
date: 2016-07-16 22:51:48 +0800
categories: algorithm
---

An implementation of few commonly used sorting method in C programming language such as insertion sort, shell sort.


## Public Definition

{% highlight c %}
typedef int T;

int compare(T a, T b)
{
    return a - b;
}

void swap(T* a, T* b)
{
    T temp = *a;
    *a = *b;
    *b = temp;
}
{% endhighlight %}

---

## Insertion Sort

Time complexity: Ðž(n <sup>2</sup>)

{% highlight c %}
void insertion_sort(T* arr, int len)
{
    for(int i = 1; i < len; i++)
    {
        int j;
        T temp = arr[i];
        for(j = i - 1; j >= 0 && compare(temp, arr[j]) < 0; j--)
            arr[j + 1] = arr[j];
        arr[j + 1] = temp;
    }
}
{% endhighlight %}

---

## Shell Sort

{% highlight c %}
void shell_sort(T* arr, int len)
{
    for(int d = len / 2; d > 0; d /= 2)
    {
        for(int i = d; i < len; i += d)
        {
            int j;
            T temp = arr[i];
            for(j = i - d; j >= 0 && compare(temp, arr[j]) < 0; j -= d)
                arr[j + d] = arr[j];
            arr[j + d] = temp;
        }
    }
}
{% endhighlight %}

---

## Quick Sort

Time complexity: O(n log n)

{% highlight c %}
static void _insertion_sort(T* arr, int left, int right)
{
    for(int i = left + 1; i <= right; i++)
    {
        int j;
        T temp = arr[i];
        for(j = i - 1; j >= 0 && compare(temp, arr[j]) < 0; j--)
            arr[j + 1] = arr[j];
        arr[j + 1] = temp;
    }
}

static void _select_median(T* arr, int left, int right)
{
    int mid = (left + right) / 2;
    if(compare(arr[mid], arr[left]) < 0)
        swap(arr + left, arr + mid);
    if(compare(arr[right], arr[left]) < 0)
        swap(arr + left, arr + right);
    if(compare(arr[right], arr[mid]) < 0)
        swap(arr + mid, arr + right);
    swap(arr + mid, arr + right - 1);
}

static int _partition(T* arr, int left, int right)
{
    T pivot = arr[right];
    int i = left, j = right;
    while (true) {
        while (compare(arr[i], pivot) < 0)
            i++;
        while (compare(arr[j], pivot) >= 0)
            j--;
        if(i > j)
            break;
        swap(arr + i, arr + j);
    }
    swap(arr + i, arr + right);

    return i;
}

static void _quick_sort(T* arr, int left, int right)
{
    if(left + 8 > right)
    {
        _insertion_sort(arr, left, right);
    }
    else
    {
        _select_median(arr, left, right);
        int mid = _partition(arr, left, right - 1);
        _quick_sort(arr, left, mid - 1);
        _quick_sort(arr, mid + 1, right);
    }
}

void quick_sort(T* arr, int len)
{
    _quick_sort(arr, 0, len - 1);
}
{% endhighlight %}

---